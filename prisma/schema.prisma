generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  limit       Decimal
  expired     Int
  avatar      String?
  balance     Decimal
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  card        Card[]
  invoice     Invoice[]
  application Application[]
  shopping    Shopping[]

  @@map("users")
}

model Card {
  id           String     @id @default(uuid())
  name         String
  due_date     Int
  closing_date Int
  color_font   String
  color_card   String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  shopping     Shopping[]

  user_id User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@map("cards")
}

model Shopping {
  id                 String        @id @default(uuid())
  name               String
  type_invoice       String
  payment_method     String
  value              Decimal
  total_installments Int
  description        String?
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
  installment        Installment[]

  card_id Card?   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId  String?

  categories_id Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String

  user_id User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@map("shopping")
}

model Installment {
  id                 String   @id @default(uuid())
  installment_number Int
  total_installments Int
  due_date           DateTime
  status             String
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  shopping_id Shopping @relation(fields: [shoppingId], references: [id], onDelete: Cascade)
  shoppingId  String

  invoice_id Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId  String

  @@map("installments")
}

model Category {
  id         String     @id @default(uuid())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  shopping   Shopping[]

  @@map("categories")
}

model Invoice {
  id          String        @id @default(uuid())
  pay         Boolean
  due_date    DateTime      @unique
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  installment Installment[]

  user_id User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@map("invoices")
}

model Application {
  id                String    @id @default(uuid())
  name              String
  target_value      Decimal
  value             Decimal
  institution       String
  color_font        String
  color_application String
  icon              String
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  extract           Extract[]

  user_id User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@map("applications")
}

model Extract {
  id         String   @id @default(uuid())
  type       String
  value      Decimal
  created_at DateTime @default(now())

  application_id Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId  String

  @@map("extracts")
}
