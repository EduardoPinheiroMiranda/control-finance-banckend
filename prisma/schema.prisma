generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  password    String
  limit       Decimal
  due_day     Int
  closing_day   Int
  avatar      String?
  balance     Decimal
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  card        Card[]
  invoice     Invoice[]
  application Application[]
  shopping    Shopping[]

  @@map("users")
}

model Card {
  id           String     @id @default(uuid())
  name         String
  due_day      Int
  closing_day  Int
  color_font   String
  color_card   String
  active       Boolean    @default(true)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  shopping     Shopping[]

  userId User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  String

  @@map("cards")
}

model Shopping {
  id                 String        @id @default(uuid())
  name               String
  type_invoice       String
  payment_method     String
  value              Decimal
  total_installments Int
  pay                Boolean       @default(false)
  description        String?
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
  installment        Installment[]

  cardId Card?   @relation(fields: [card_id], references: [id], onDelete: Cascade)
  card_id  String?

  categoriesId Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id    String

  userId User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  String

  @@map("shopping")
}

model Installment {
  id                 String   @id @default(uuid())
  installment_number Int
  installment_value  Decimal
  due_date           DateTime
  pay                Boolean  @default(false)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  shoppingId Shopping @relation(fields: [shopping_id], references: [id], onDelete: Cascade)
  shopping_id  String

  invoiceId Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  invoice_id  String

  @@map("installments")
}

model Category {
  id         String     @id @default(uuid())
  name       String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  shopping   Shopping[]

  @@map("categories")
}

model Invoice {
  id            String        @id @default(uuid())
  pay           Boolean       @default(false)
  due_date      DateTime      @unique
  closing_date  DateTime      @unique
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  installment   Installment[]

  userId User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@map("invoices")
}

model Application {
  id                String    @id @default(uuid())
  name              String
  target_value      Decimal
  value             Decimal
  institution       String
  color_font        String
  color_application String
  icon              String
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  extract           Extract[]

  userId User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@map("applications")
}

model Extract {
  id         String   @id @default(uuid())
  type       String
  value      Decimal
  created_at DateTime @default(now())

  applicationId Application @relation(fields: [application_id], references: [id], onDelete: Cascade)
  application_id  String

  @@map("extracts")
}
